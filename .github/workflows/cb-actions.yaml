name: CB-CI-ACTIONS-WORKFLOW

on:
  push:
  pull_request:

jobs:
  cb-ci-test-job:
    name: CB-CI-TEST-JOB
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ["1.16"]
    steps:
      - name: Check Environment variable
        id: cev
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}        
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            (async _ => {
              console.log(context)       
              core.setOutput('branch', context.ref.replace("refs/heads/", ""))

              var author_association = ""
              console.log("context.actor", context.actor)
              console.log("owner.login", context.payload.repository.owner.login)
              if(context.actor == context.payload.repository.owner.login) author_association = "OWNER"

              core.setOutput('author_association', author_association)

              try {
                var res = await github.orgs.checkMembershipForUser({org: "cloud-barista", username: context.actor})
                console.log('checkMembershipForUser', res)
              } catch (e) {
                console.log(e)
              }

              try {
                res = await github.repos.checkCollaborator({
                  owner: context.payload.repository.owner.login,
                  repo: context.payload.repository.name,
                  username: context.actor,
                })
                console.log('checkCollaborator', res)
              } catch (e) {
                console.log(e)
              }

            })();          

      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Setup golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.39.0
          golangci-lint --version

      - name: Find PR Number
        id: findPrNumber
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var prNumber = '0'

            if(context.eventName == 'pull_request') {
              prNumber = context.payload.number
            } else if(context.eventName == 'push') {
              const result = await github.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha
              })
              const pr = result.data.length > 0 && result.data[0];
              prNumber = pr && pr.number || '0'
            }
            fs.writeFileSync('./outputs/pr_number.txt', prNumber, 'utf8');

      - name: Run Lint
        run: |
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E deadcode | tee ./outputs/deadcode-lint-result.txt
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E errcheck | tee ./outputs/errcheck-lint-result.txt
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E staticcheck | tee ./outputs/staticcheck-lint-result.txt
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E revive | tee ./outputs/revive-lint-result.txt

          if [ -f "./outputs/deadcode-lint-result.txt" ] ; then
            echo "======= deadcode-lint-result.txt ======="
            cat ./outputs/deadcode-lint-result.txt
          fi
          if [ -f "./outputs/errcheck-lint-result.txt" ] ; then
            echo "======= errcheck-lint-result.txt ======="
            cat ./outputs/errcheck-lint-result.txt
          fi
          if [ -f "./outputs/staticcheck-lint-result.txt" ] ; then
            echo "======= staticcheck-lint-result.txt ======="
            cat ./outputs/staticcheck-lint-result.txt
          fi  
          if [ -f "./outputs/revive-lint-result.txt" ] ; then
            echo "======= revive-lint-result.txt ======="
            cat ./outputs/revive-lint-result.txt
          fi

      - name: Run Coverage
        env:
          CBSPIDER_ROOT: ${{ github.workspace }}/integration-test
          CBSTORE_ROOT: ${{ github.workspace }}/integration-test
          CBLOG_ROOT: ${{ github.workspace }}/integration-test
          LOCALHOST: OFF
          PLUGIN_SW: OFF
          MEERKAT: OFF
        run: |
          cd ${{ github.workspace }}/integration-test

          (go test -p 1 -v -coverpkg=$(go list ../... | grep -v integration-test | grep -v protobuf | tr "\n" ",")  -coverprofile=../outputs/coverage.txt ./... > ../outputs/coverage.log 2>&1; echo $? > ../outputs/coverage.check ) || true
          
          if [ -f "../outputs/coverage.check" ] ; then
            echo "======= coverage.check ======="
            cat ../outputs/coverage.check
          fi    
          if [ -f "../outputs/coverage.log" ] ; then
            echo "======= coverage.log ======="
            cat ../outputs/coverage.log
          fi   
          #if [ -f "../outputs/coverage.txt" ] ; then
          #  echo "======= coverage.txt ======="
          #  cat ../outputs/coverage.txt
          #fi

          (go tool cover -html=../outputs/coverage.txt -o ../outputs/coverage.html) || true
          (go tool cover -func ../outputs/coverage.txt | grep total | awk '{print $3}' > ../outputs/coverage.total) || true

          go get -u github.com/jstemmer/go-junit-report
          cat ../outputs/coverage.log | go-junit-report > ../outputs/unit-tests.xml
          if [ -f "../outputs/unit-tests.xml" ] ; then
            echo "======= unit-tests.xml ======="
            cat ../outputs/unit-tests.xml
          fi

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact
          path: outputs/

  cb-ci-build-job:
    name: CB-CI-BUILD-JOB
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ["1.16"]
    outputs:
      build_1_16: ${{ steps.build.outputs.build_1_16 }}
    steps:
      - name: Check environment variable
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: |
          echo 'workflow starting'

      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Run Build
        id: build
        run: |
          (go build -o test ./api-runtime/apiserver.go > ./outputs/build.log.${{ matrix.go }} 2>&1; echo $? > ./outputs/build.check.${{ matrix.go }} ) || true

          if [ -f "./outputs/build.check.${{ matrix.go }}" ] ; then
            echo "======= build.check.${{ matrix.go }} ======="
            cat ./outputs/build.check.${{ matrix.go }}
          fi    
          if [ -f "./outputs/build.log.${{ matrix.go }}" ] ; then
            echo "======= build.log.${{ matrix.go }} ======="
            cat ./outputs/build.log.${{ matrix.go }}
          fi

          buildCheck=`cat ./outputs/build.check.${{ matrix.go }}`
          if [ ${{ matrix.go }} == "1.16" ]; then
              echo "Golang ${{ matrix.go }} Build Error !!!"
              echo "::set-output name=build_1_16::${buildCheck}"
          fi

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact-${{ matrix.go }}
          path: outputs/

  cb-ci-deploy-job:
    name: CB-CI-DEPLOY-JOB
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: [cb-ci-build-job]
    strategy:
      matrix:
        go: ["1.16"]
    env:
      DOCKER_REPO: cloud-barista
      IMAGE_NAME: poc-cicd-spider
    steps:
      - name: Check environment variable
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          OUTPUTS: ${{ toJSON(needs.cb-ci-build-job.outputs) }}
        run: |
          echo 'workflow starting'

      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Prepare Tags
        id: prep
        run: |
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi

          DOCKER_IMAGE=$DOCKER_REPO/$IMAGE_NAME
          DOCKER_TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}.*$ ]]; then
            DOCKER_TAGS="$DOCKER_TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=docker-image::${DOCKER_IMAGE}
          echo ${DOCKER_IMAGE}
          echo ::set-output name=docker-tags::${DOCKER_TAGS}
          echo ${DOCKER_TAGS}
          GHCR_IMAGE=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          GHCR_TAGS="${GHCR_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}.*$ ]]; then
            GHCR_TAGS="$GHCR_TAGS,${GHCR_IMAGE}:latest"
          fi
          echo ::set-output name=ghcr-image::${GHCR_IMAGE}
          echo ${GHCR_IMAGE}          
          echo ::set-output name=ghcr-tags::${GHCR_TAGS}
          echo ${GHCR_TAGS}

      - name: Build Image Test
        id: imgbuild
        run: |
          (docker build . --file Dockerfile --tag $IMAGE_NAME > ./outputs/dockerbuild.log 2>&1; echo $? > ./outputs/dockerbuild.check ) || true

          if [ -f "./outputs/dockerbuild.check" ] ; then
            echo "======= dockerbuild.check ======="
            cat ./outputs/dockerbuild.check
          fi    
          if [ -f "./outputs/dockerbuild.log" ] ; then
            echo "======= dockerbuild.log ======="
            cat ./outputs/dockerbuild.log
          fi

          dockerBuildCheck=`cat ./outputs/dockerbuild.check`
          echo "::set-output name=docker_build_check::${dockerBuildCheck}"

          (docker rmi $IMAGE_NAME) || true

      - name: Set up QEMU
        if: ${{ steps.imgbuild.outputs.docker_build_check == 0 && needs.cb-ci-build-job.outputs.build_1_16 == 0 }}
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        if: ${{ steps.imgbuild.outputs.docker_build_check == 0 && needs.cb-ci-build-job.outputs.build_1_16 == 0 }}
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        if: ${{ steps.imgbuild.outputs.docker_build_check == 0 && needs.cb-ci-build-job.outputs.build_1_16 == 0 }}
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      #- name: Login to Docker Hub
      #  if: ${{ steps.imgbuild.outputs.docker_build_check == 0 && needs.cb-ci-build-job.outputs.build_1_16 == 0 }}
      #  uses: docker/login-action@v1
      #  with:
      #    username: ${{ secrets.DOCKER_USERNAME }}
      #    password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        if: ${{ steps.imgbuild.outputs.docker_build_check == 0 && needs.cb-ci-build-job.outputs.build_1_16 == 0 }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and publish
        if: ${{ steps.imgbuild.outputs.docker_build_check == 0 && needs.cb-ci-build-job.outputs.build_1_16 == 0 }}
        id: imgpublish
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          platforms: linux/amd64 # linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x,linux/arm/v6
          push: true
          tags: |
            ${{ steps.prep.outputs.ghcr-tags }}
          #tags: |
          #  ${{ steps.prep.outputs.docker-tags }}
          #  ${{ steps.prep.outputs.ghcr-tags }}          
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Publish Image Check
        if: ${{ steps.imgbuild.outputs.docker_build_check == 0 && needs.cb-ci-build-job.outputs.build_1_16 == 0 }}
        id: imgcheck
        run: |
          (docker pull ${{ steps.prep.outputs.ghcr-tags }}@${{ steps.imgpublish.outputs.digest }} > ./outputs/ghcrpublish.log 2>&1; echo $? > ./outputs/ghcrpublish.check ) || true
          
          if [ -f "./outputs/ghcrpublish.check" ] ; then
            echo "======= ghcrpublish.check ======="
            cat ./outputs/ghcrpublish.check
          fi    
          if [ -f "./outputs/ghcrpublish.log" ] ; then
            echo "======= ghcrpublish.log ======="
            cat ./outputs/ghcrpublish.log
          fi

          ghcrPublishCheck=`cat ./outputs/ghcrpublish.check`
          echo "::set-output name=ghcr_publish_check::${ghcrPublishCheck}"

          docker rmi $(docker images -f "dangling=true" -q)
                   
          (docker pull ${{ steps.prep.outputs.docker-tags }}@${{ steps.imgpublish.outputs.digest }} > ./outputs/dockerpublish.log 2>&1; echo $? > ./outputs/dockerpublish.check ) || true
          
          if [ -f "./outputs/dockerpublish.check" ] ; then
            echo "======= dockerpublish.check ======="
            cat ./outputs/dockerpublish.check
          fi    
          if [ -f "./outputs/dockerpublish.log" ] ; then
            echo "======= dockerpublish.log ======="
            cat ./outputs/dockerpublish.log
          fi

          dockerPublishCheck=`cat ./outputs/dockerpublish.check`
          echo "::set-output name=docker_publish_check::${dockerPublishCheck}"

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact-deploy
          path: outputs/
